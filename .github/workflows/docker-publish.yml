name: Build and Publish LightRAG Docker Image

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
    tags:
      - 'v*.*.*' # Trigger on semantic version tags (e.g., v1.0.0, v1.2.3)
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      # Read access to the repository contents is required to checkout the code.
      contents: read
      # Write access to packages is required to publish Docker images to GHCR.
      packages: write
      # Write access for OIDC token is required by actions/attest-build-provenance
      # when push-to-registry is true, to attest to artifacts in GHCR.
      id-token: write

    env:
      # Define IMAGE_NAME, ensuring it's lowercase for GHCR compatibility and consistency.
      # ghcr.io/OWNER/IMAGE_NAME
      IMAGE_NAME: ghcr.io/${{ lower(github.repository_owner) }}/${{ lower(github.event.repository.name) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.13.1 # Using a specific buildkit version

      - name: Login to GitHub Container Registry (GHCR)
        # Login is skipped for pull_request events (though this workflow isn't triggered by them).
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # The `images` input uses the consistently lowercased IMAGE_NAME.
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # type=schedule # Example: if you have scheduled runs
            type=ref,event=branch # Creates a tag for the branch name (e.g., main)
            type=ref,event=pr # Creates a tag for PRs (if workflow triggered on PR)
            type=semver,pattern={{version}} # For Git tags like v1.2.3
            type=semver,pattern={{major}}.{{minor}} # For Git tags like v1.2
            type=sha,prefix=,suffix=,format=short # Git SHA as a tag (e.g., ca28e57)
            # Create 'latest' tag for pushes to the main branch
            type=match,pattern=main,group=0,value=latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          # Push conditions:
          # - On push to 'main' branch
          # - On push to any tag (e.g., v1.2.3)
          # - On manual 'workflow_dispatch'
          push: ${{ (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))) || github.event_name == 'workflow_dispatch' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64 # Specify target platform(s)
          # Cache settings: Using the consistently lowercased IMAGE_NAME for cache path.
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER || 'lightrag_user' }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB || 'lightrag_db' }}
            LLM_MODEL=${{ secrets.LLM_MODEL || 'gpt-4o-mini' }}
            EMBEDDING_MODEL=${{ secrets.EMBEDDING_MODEL || 'text-embedding-3-small' }}
            EMBEDDING_DIM=${{ secrets.EMBEDDING_DIM || '1536' }}

      - name: Generate artifact attestation
        # Generate attestation only if the image was successfully pushed (digest is available)
        # and the event conditions for pushing were met.
        if: steps.push.outputs.digest && ((github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))) || github.event_name == 'workflow_dispatch')
        uses: actions/attest-build-provenance@v2
        with:
          # Attestation subject-name uses the consistently lowercased IMAGE_NAME.
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }} # Digest from the build-push step
          push-to-registry: true
